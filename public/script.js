// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–∞—Ü—ñ—î–Ω—Ç—ñ–≤ —á–µ—Ä–µ–∑ API
async function fetchPatients() {
  try {
    const response = await fetch('/api/patients');
    const data = await response.json();
    renderPatients(data);
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ø–∞—Ü—ñ—î–Ω—Ç—ñ–≤:', error);
  }
}

// –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–∞—Ü—ñ—î–Ω—Ç—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
function renderPatients(patients) {
  const tableBody = document.querySelector("#patients-table tbody");
  tableBody.innerHTML = ""; // –û—á–∏—â–∞—î–º–æ —Ç–∞–±–ª–∏—Ü—é –ø–µ—Ä–µ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º

  patients.forEach(patient => {
    const row = document.createElement("tr");
    row.innerHTML = `
      <td><a> ${patient.name}</a></td>
      <td>${patient.age}</td>
      <td>${patient.contact}</td>
      <td>${patient.lastVisit}</td>
      <td>
        <button class="btn btn-warning btn-sm me-2" onclick="editPatient(${patient.id})">‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏</button>
        <button class="btn btn-danger btn-sm" onclick="deletePatient(${patient.id})">üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏</button>
      </td>
    `;
    tableBody.appendChild(row);
  });
}
function formatDate(isoDate) {
  const date = new Date(isoDate);
  return date.toLocaleDateString('uk-UA', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
}

// –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ü—ñ—î–Ω—Ç–∞ —á–µ—Ä–µ–∑ API
async function addPatient(patient) {
  try {
    const response = await fetch('/api/patients', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(patient)
    });

    const newPatient = await response.json();
    renderPatients([newPatient]);
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ø–∞—Ü—ñ—î–Ω—Ç–∞:', error);
  }
}

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–∞—Ü—ñ—î–Ω—Ç–∞ (–Ω–æ–≤–∏–π –∞–±–æ –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–∏–π)
async function savePatient(event) {
  event.preventDefault();

  const newPatient = {
    name: document.getElementById("patient-name").value,
    age: parseInt(document.getElementById("patient-age").value),
    contact: document.getElementById("patient-contact").value,
    lastVisit: document.getElementById("patient-visit").value,
    disease: document.getElementById("patient-disease").value || "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –≤—ñ–¥—Å—É—Ç–Ω—è"
  };

  if (editingPatientId) {
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ –ø–∞—Ü—ñ—î–Ω—Ç–∞ —á–µ—Ä–µ–∑ API
    await updatePatient(editingPatientId, newPatient);
  } else {
    // –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ü—ñ—î–Ω—Ç–∞ —á–µ—Ä–µ–∑ API
    await addPatient(newPatient);
  }

  // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –ø—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
  const modal = new bootstrap.Modal(document.getElementById("patient-modal"));
  modal.hide();
  patientForm.reset(); // –û—á–∏—â—É—î–º–æ —Ñ–æ—Ä–º—É
  editingPatientId = null;
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ –ø–∞—Ü—ñ—î–Ω—Ç–∞ —á–µ—Ä–µ–∑ API
async function updatePatient(id, patient) {
  try {
    const response = await fetch(`/api/patients/${id}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(patient)
    });

    const updatedPatient = await response.json();
    fetchPatients(); // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –ø–∞—Ü—ñ—î–Ω—Ç—ñ–≤ –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–∞—Ü—ñ—î–Ω—Ç–∞:', error);
  }
}

// –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–∞—Ü—ñ—î–Ω—Ç–∞
function editPatient(id) {
  editingPatientId = id;

  // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø–∞—Ü—ñ—î–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
  fetch(`/api/patients/${id}`)
    .then(response => response.json())
    .then(patient => {
      document.getElementById("patient-name").value = patient.name;
      document.getElementById("patient-age").value = patient.age;
      document.getElementById("patient-contact").value = patient.contact;
      document.getElementById("patient-visit").value = patient.lastVisit;
      document.getElementById("patient-disease").value = patient.disease || "";
      const modal = new bootstrap.Modal(document.getElementById("patient-modal"));
      modal.show(); // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
    })
    .catch(error => console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–∞—Ü—ñ—î–Ω—Ç–∞:', error));
}

// –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–∞—Ü—ñ—î–Ω—Ç–∞
async function deletePatient(id) {
  try {
    await fetch(`/api/patients/${id}`, {
      method: 'DELETE'
    });
    fetchPatients(); // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –ø–∞—Ü—ñ—î–Ω—Ç—ñ–≤ –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø–∞—Ü—ñ—î–Ω—Ç–∞:', error);
  }
}
function renderPatients(patients) {
  const tableBody = document.querySelector("#patients-table tbody");
  tableBody.innerHTML = ""; // –û—á–∏—â–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ

  patients.forEach(patient => {
    const row = document.createElement("tr");
    row.innerHTML = `
      <td><a href="/patient.html?id=${patient.id}">${patient.name}</a></td>
      <td>${patient.age}</td>
      <td>${patient.contact}</td>
      <td>${patient.lastVisit}</td>
      <td>
        <button class="btn btn-warning btn-sm me-2" onclick="editPatient(${patient.id})">‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏</button>
        <button class="btn btn-danger btn-sm" onclick="deletePatient(${patient.id})">üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏</button>
      </td>
    `;
    tableBody.appendChild(row);
  });
}


// –ü–æ–¥—ñ—ó
document.getElementById("add-patient-btn").addEventListener("click", () => {
  editingPatientId = null; // –û—á–∏—â–∞—î–º–æ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
  document.getElementById("patient-form").reset(); // –û—á–∏—â—É—î–º–æ —Ñ–æ—Ä–º—É
  const modal = new bootstrap.Modal(document.getElementById("patient-modal"));
  modal.show(); // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
});

document.getElementById("patient-form").addEventListener("submit", savePatient);

// –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø–∞—Ü—ñ—î–Ω—Ç—ñ–≤
fetchPatients();
